[
["index.html", "Visualization, transformation and reporting with the tidyverse Preface Links Package versions used License", " Visualization, transformation and reporting with the tidyverse Kirill Müller, Tobias Schieferdecker 26 September 2019, 15:53 CEST Preface See the controls at the top of the website for searching, font size, editing, and a link to the PDF version of the material. Links This website: https://krlmlr.github.io/vistransrep/ Scripts and installation instructions: https://github.com/krlmlr/vistransrep-proj/tree/master Prepared scripts: https://github.com/krlmlr/vistransrep-proj/tree/master/script Live code: https://github.com/krlmlr/vistransrep-proj/tree/master/live The source project for this material: https://github.com/krlmlr/vistransrep Package versions used Click to expand withr::with_options(list(width = 80), print(sessioninfo::session_info())) ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 3.6.1 (2019-07-05) ## os Ubuntu 18.04.3 LTS ## system x86_64, linux-gnu ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Europe/Zurich ## date 2019-09-26 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 3.6.1) ## backports 1.1.4 2019-04-10 [1] CRAN (R 3.6.1) ## bookdown 0.13 2019-08-21 [1] CRAN (R 3.6.1) ## broom 0.5.2 2019-04-07 [1] standard (@0.5.2) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.1) ## cli 1.1.0 2019-03-19 [1] CRAN (R 3.6.1) ## codetools 0.2-16 2018-12-24 [1] CRAN (R 3.6.1) ## colorspace 1.4-1 2019-03-18 [1] CRAN (R 3.6.1) ## conflicted * 1.0.4 2019-06-21 [1] CRAN (R 3.6.1) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 3.6.1) ## curl 4.0 2019-07-22 [1] CRAN (R 3.6.1) ## data.table 1.12.2 2019-04-07 [1] CRAN (R 3.6.1) ## digest 0.6.20 2019-07-04 [1] CRAN (R 3.6.1) ## dplyr * 0.8.3 2019-07-04 [1] standard (@0.8.3) ## evaluate 0.14 2019-05-28 [1] CRAN (R 3.6.1) ## fansi 0.4.0 2018-10-05 [1] CRAN (R 3.6.1) ## forcats * 0.4.0 2019-02-17 [1] CRAN (R 3.6.1) ## foreign 0.8-72 2019-08-02 [1] CRAN (R 3.6.1) ## generics 0.0.2 2018-11-29 [1] CRAN (R 3.6.1) ## ggplot2 * 3.2.1 2019-08-10 [1] standard (@3.2.1) ## glue 1.3.1 2019-03-12 [1] CRAN (R 3.6.1) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 3.6.1) ## haven 2.1.1 2019-07-04 [1] standard (@2.1.1) ## here * 0.1 2017-05-28 [1] standard (@0.1) ## hms 0.5.1 2019-08-23 [1] CRAN (R 3.6.1) ## htmltools 0.3.6 2017-04-28 [1] CRAN (R 3.6.1) ## httr 1.4.1 2019-08-05 [1] standard (@1.4.1) ## jsonlite 1.6 2018-12-07 [1] CRAN (R 3.6.1) ## knitr 1.24 2019-08-08 [1] standard (@1.24) ## labeling 0.3 2014-08-23 [1] CRAN (R 3.6.1) ## lattice 0.20-38 2018-11-04 [1] CRAN (R 3.6.1) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 3.6.1) ## lifecycle 0.1.0 2019-08-01 [1] CRAN (R 3.6.1) ## lubridate 1.7.4 2018-04-11 [1] CRAN (R 3.6.1) ## magrittr * 1.5 2014-11-22 [1] CRAN (R 3.6.1) ## memoise 1.1.0 2017-04-21 [1] CRAN (R 3.6.1) ## modelr 0.1.5 2019-08-08 [1] standard (@0.1.5) ## munsell 0.5.0 2018-06-12 [1] CRAN (R 3.6.1) ## nlme 3.1-141 2019-08-01 [1] CRAN (R 3.6.1) ## nycflights13 * 1.0.0 2018-06-26 [1] standard (@1.0.0) ## openxlsx 4.1.0.1 2019-05-28 [1] CRAN (R 3.6.1) ## packrat 0.5.0 2018-11-14 [1] standard (@0.5.0) ## pillar 1.4.2 2019-06-29 [1] CRAN (R 3.6.1) ## pkgconfig 2.0.2 2018-08-16 [1] CRAN (R 3.6.1) ## plyr 1.8.4 2016-06-08 [1] CRAN (R 3.6.1) ## purrr * 0.3.2 2019-03-15 [1] CRAN (R 3.6.1) ## R6 2.4.0 2019-02-14 [1] CRAN (R 3.6.1) ## Rcpp 1.0.2 2019-07-25 [1] CRAN (R 3.6.1) ## readr * 1.3.1 2018-12-21 [1] standard (@1.3.1) ## readxl 1.3.1 2019-03-13 [1] standard (@1.3.1) ## reshape2 1.4.3 2017-12-11 [1] CRAN (R 3.6.1) ## rio 0.5.16 2018-11-26 [1] standard (@0.5.16) ## rlang 0.4.0 2019-06-25 [1] CRAN (R 3.6.1) ## rmarkdown 1.15 2019-08-21 [1] CRAN (R 3.6.1) ## rprojroot 1.3-2 2018-01-03 [1] CRAN (R 3.6.1) ## rstudioapi 0.10 2019-03-19 [1] CRAN (R 3.6.1) ## rvest 0.3.4 2019-05-15 [1] standard (@0.3.4) ## scales 1.0.0 2018-08-09 [1] standard (@1.0.0) ## sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 3.6.1) ## snakecase 0.11.0 2019-05-25 [1] standard (@0.11.0) ## stringi 1.4.3 2019-03-12 [1] CRAN (R 3.6.1) ## stringr * 1.4.0 2019-02-10 [1] CRAN (R 3.6.1) ## tibble * 2.1.3 2019-06-06 [1] CRAN (R 3.6.1) ## tidyr * 1.0.0 2019-09-11 [1] CRAN (R 3.6.1) ## tidyselect 0.2.5 2018-10-11 [1] CRAN (R 3.6.1) ## tidyverse * 1.2.1 2017-11-14 [1] standard (@1.2.1) ## utf8 1.1.4 2018-05-24 [1] CRAN (R 3.6.1) ## vctrs 0.2.0 2019-07-05 [1] CRAN (R 3.6.1) ## withr 2.1.2 2018-03-15 [1] CRAN (R 3.6.1) ## xfun 0.9 2019-08-21 [1] CRAN (R 3.6.1) ## xml2 1.2.2 2019-08-09 [1] CRAN (R 3.6.1) ## yaml 2.2.0 2018-07-25 [1] CRAN (R 3.6.1) ## zeallot 0.1.0 2018-01-28 [1] CRAN (R 3.6.1) ## zip 2.0.4 2019-09-01 [1] CRAN (R 3.6.1) ## ## [1] /home/kirill/R/x86_64-pc-linux-gnu-library/3.6 ## [2] /usr/local/lib/R/site-library ## [3] /usr/lib/R/site-library ## [4] /usr/lib/R/library License Licensed under CC-BY-NC 4.0. "],
["introduction.html", "1 Introduction 1.1 Overview", " 1 Introduction The tidyverse has quickly developed over the last years. Its first implementation as a collection of partly older packages was in the second half of 2016. All its packages “share an underlying design philosophy, grammar, and data structures.”1 It is for sure difficult to tell, if “learning the tidyverse” is a hard task, since the result of this assessment might differ from person to person. We do believe though, that there are concepts in its approach, which – when grasped – have the potential to increase one’s productivity, since code creation will seem more natural. While this might be true for all languages (once you speak it well enough, things go smoothly), in our opinion the tidyverse worth exploring in depth, since it is consistent: an especially well designed framework that aims at making data analysis and programming intuitive, evolving: constantly deepened understanding for challenges arising in modern data analysis leads to improving ergonomic user interfaces. 1.1 Overview This course covers several topics, which everyone working more intently with the tidyverse almost inevitably needs to deal with at some point or another. The topics are organized in chapters that contain mostly R code with output and text. In each section, exercises are provided. citation from tidyverse homepage↩ "],
["visualization.html", "2 Visualization 2.1 Basics for visualisation in R using {ggplot2} 2.2 Tweaks and tricks 2.3 Labels and layers 2.4 Statistical summaries 2.5 Facet plots", " 2 Visualization Embracing the grammar of graphics. This chapter discusses plotting with the ggplot2 package. 2.1 Basics for visualisation in R using {ggplot2} Click here to show setup code. library(tidyverse) In the {tidyverse} the standard package for visualisation is {ggplot2}. The functions of this package follow a quite unique logic (the “grammar of graphics”) and therefore require a special syntax. In this section we want to give a short introduction, how to get started with {ggplot2}. The main function in the package is ggplot(), which prepares/creates a graph. By setting the parameters of the function, you can: 1. choose the dataset to be plotted in the parameter data 2. choose the mapping of the variables to the axes (or further forms of setting apart data) in the parameter mapping. This parameter takes the result of the function aes(), which you will get to know in many different examples. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) This created only an empty plot, because we did not tell {ggplot2}, which geometry we want to use to display the result. We do this by adding (literally using + after the ggplot()-call) a different function starting with geom_ to provide this information. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point() This is maybe the most basic plot you can create. To map a different variable than disp to the x-axis, change the respective parameter in aes(). ggplot( data = mpg, mapping = aes(x = cyl, y = hwy) ) + geom_point() You can exchange the variables to be plotted freely, without changing anything else to the rest of the code. ggplot( data = mpg, mapping = aes(x = hwy, y = cty) ) + geom_point() 2.2 Tweaks and tricks Click here to show setup code. library(tidyverse) Change the color of the plotted data by setting parameter color in the geom()-function to a character variable with the color name. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point( color = &quot;red&quot; ) ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point( color = &quot;blue&quot; ) ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point( color = &quot;green&quot; ) Different colors can be mapped to the values of a variable as a further aesthetic property of the plot. ggplot( data = mpg, mapping = aes(x = displ, y = hwy, color = class) ) + geom_point() One more degree of freedom is the shape of the symbols to be plotted. ggplot( data = mpg, mapping = aes( x = displ, y = hwy, shape = class ) ) + geom_point() ## Warning: The shape palette can deal with a maximum of 6 discrete values ## because more than 6 becomes difficult to discriminate; you have 7. ## Consider specifying shapes manually if you must have them. ## Warning: Removed 62 rows containing missing values (geom_point). ggplot( data = mpg, mapping = aes( x = displ, y = hwy, shape = drv ) ) + geom_point() And last but not least, the size of the plotted symbols can be linked to numeric values of the mapped variable. ggplot( data = mpg, mapping = aes( x = displ, y = hwy, size = cty ) ) + geom_point() You can mix different aesthetic mappings in order to produce a plot with densely packed information. ggplot( data = mpg, mapping = aes( x = displ, y = hwy, color = class, size = cty ) ) + geom_point() Choosing a specific color in the mapping-argument of ggplot() does not work, since a mapping of a variable to an aesthetic is expected. Let’s try passing a color anyway… try( ggplot( data = mpg, mapping = aes( x = displ, y = hwy, color = blue ) ) + geom_point() ) ## Error in FUN(X[[i]], ...): object &#39;blue&#39; not found R treats objects without quotation marks in a special way, expecting them to be variables. Since blue is not a variable of mpg, this did not work. The following should shed some light on the difference between objects with and without quotation marks. mpg ## # A tibble: 234 x 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto(… f 18 29 p comp… ## 2 audi a4 1.8 1999 4 manua… f 21 29 p comp… ## 3 audi a4 2 2008 4 manua… f 20 31 p comp… ## # … with 231 more rows &quot;mpg&quot; ## [1] &quot;mpg&quot; So what if we pass the color as a character variable? ggplot( data = mpg, mapping = aes( x = displ, y = hwy, color = &quot;blue&quot; ) ) + geom_point() At least there was no error, but now the constant value blue is mapped to the first default color of the color mapping, which happens to be red. We could have been fooled, if it had been blue… Another way to better display your data can be semi-transparency. This is useful to get an impression of how many data points share the same coordinates. ggplot( data = mpg, mapping = aes( x = displ, y = hwy ) ) + geom_point(alpha = 0.2) Within the aes()-function you can not only provide the bare variable of the data set, but you can also pass a function of a variable. ggplot( data = mpg, mapping = aes( x = displ, y = 2.35 / hwy ) ) + geom_point() Trying to map aesthetics in the geom()-function, does not work. try( ggplot( data = mpg, mapping = aes( x = displ, y = 2.35 / hwy ) ) + geom_point(color = class) ) ## Error in rep(value[[k]], length.out = n): attempt to replicate an object of type &#39;builtin&#39; 2.3 Labels and layers Click here to show setup code. library(tidyverse) For character variables there is further way of integrating its value to a plot. geom_text() takes a parameter label, which influences the plot in the following way. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_text(label = &quot;A&quot;) Let’s try to map this parameter to a variable (here: drv) of our dataset in the mapping parameter of ggplot(). ggplot( data = mpg, mapping = aes(x = displ, y = hwy, label = &quot;drv&quot;) ) + geom_text() Right, of course we need to pass the variable without quotation marks, otherwise it is interpreted as a (constant) character variable. When changing this, a vector with the values of the variable is passed on to geom_text(). This is one way of including the values of character variables in a plot. ggplot( data = mpg, mapping = aes(x = displ, y = hwy, label = drv) ) + geom_text() By adding more than one geom()-function, more than one geometry is added to the plot. ggplot( data = mpg, mapping = aes(x = displ, y = hwy, label = drv) ) + geom_point() + geom_text() Since this looks just slightly odd, let’s try to make it more apparent, what is happening. ggplot( data = mpg, mapping = aes(x = displ, y = hwy, label = drv) ) + geom_point(color = &quot;blue&quot;) + geom_text(size = 10) It is also possible ot specify the mapping in the geom()-function. This way, when adding more than one geometry, you can chose different specifications for the mapping in each of the geom()-functions. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point(color = &quot;blue&quot;) + geom_text( mapping = aes(color = class, label = drv), size = 10, alpha = 0.2 ) This can be dangerous sometimes though. A good approach is always to define the mapping globally in ggplot() when possible. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point() + geom_rug() This would be redundant: ggplot( data = mpg ) + geom_point(mapping = aes(x = displ, y = hwy)) + geom_rug(mapping = aes(x = displ, y = hwy)) And here we have a mismatch between the two geometries, since the y-mapping is referring to different variables of the dataset. ggplot( data = mpg ) + geom_point(mapping = aes(x = displ, y = hwy)) + geom_rug(mapping = aes(x = displ, y = cty)) Displaying a scatter plot with an overlaid smooth curve fitted to the data is made very easy by the geometry function geom_smooth() ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point() + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; The default for the smoothing method is set to auto, which translates to a LOESS (locally estimated scatterplot smoothing) method, when dealing with fewer than 1000 observations. Changing the method to “lm”, a linear model will be fitted and displayed in your plot. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point() + geom_smooth(method = &quot;lm&quot;) 2.4 Statistical summaries Click here to show setup code. library(tidyverse) Some geom()-functions do some transformations and calculations behind the scenes before the data are visualized. One such function is geom_smooth() from the last section. Also geom_bar() does some transformations first. It just needs a mapping for the x-axis. Once that is done, the y-values displayed for each value of the x-variable are the numbers of of times that the x-value occurs in the dataset. So basically the different values are counted. ggplot( data = mpg, mapping = aes(x = class) ) + geom_bar() 2.5 Facet plots Click here to show setup code. library(tidyverse) One helpful feature that {ggplot2} offers is the facet plot. This means, that for each value of a given variable a different sub-plot is created. The relevant functions for this are facet_wrap() and facet_grid(). The former can be used like this. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point() + facet_wrap(~ class) The latter has a few more options that you can play with. Primarily, you can pass two variables to the function, one of which will determine the facetting along the rows and the other will determine the column facetting. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point() + facet_grid(year ~ drv) The first argument of facet_grid() is by default rows. If you pass a variable (needs to be the result of a call to vars() with the unquoted variable name as its parameter) to it, as many plots will be horizontally lined up, as the variable has distinct values. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point() + facet_grid(vars(year)) Specifically choose parameter cols of facet_grid() to vertically stack the plots. ggplot( data = mpg, mapping = aes(x = displ, y = hwy) ) + geom_point() + facet_grid(cols = vars(year)) "],
["best-practices.html", "3 Best practices 3.1 DESCRIPTION 3.2 R 3.3 roxygen2 3.4 testthat", " 3 Best practices R code is often organized in packages that can be installed from centralized repositories such as CRAN or GitHub. If you are new to writing R packages, this course cannot give a complete introduction into packages. It is still useful to embrace some very few concepts of R packages to gain access to a vast toolbox and also organize your code in a standardized way familiar to other users. With the first steps in place, the road to your first R package may become less steep. Create a DESCRIPTION file to declare dependencies and allow easy reloading of the functions you define Store your functions in .R files in the R/ directory in your project Scripts that you execute live in script/ or a similar directory Use roxygen2 to document your functions close to the source Write tests for your functions, e.g. with testthat See R packages for a more comprehensive treatment. 3.1 DESCRIPTION Create and open a new RStudio project. Then, create a DESCRIPTION file with usethis::use_description(): # install.packages(&quot;usethis&quot;) usethis::use_description() Double-check success: # install.packages(&quot;devtools&quot;) devtools::load_all() Declare that your project requires the tidyverse and the here package: usethis::use_package(&quot;here&quot;) # Currently doesn&#39;t work, add manually # https://github.com/r-lib/usethis/issues/760 # usethis::use_package(&quot;tidyverse&quot;) 3.2 R With a DESCRIPTION file defined, create a new .R file and save it in the R/ directory. (Create this directory if it does not exist.) Create a function in this file, save the file: hi &lt;- function(text = &quot;Hello, world!&quot;) { print(text) invisible(text) } Do not source the file. Restart R (with Ctrl + Shift + F10 in RStudio). Run devtools::load_all() again, you can use the shortcut Ctrl + Shift + L or Cmd + Shift + L in RStudio. Check that you can run hi() in the console: hi() ## [1] &quot;Hello, world!&quot; hi(&quot;Wow!&quot;) ## [1] &quot;Wow!&quot; Edit the function: hi &lt;- function(text = &quot;Wow!&quot;) { print(text) invisible(text) } Save the file, but do not source it. Run devtools::load_all() again, you can use the shortcut Ctrl + Shift + L or Cmd + Shift + L in RStudio. Check that the new implementation of hi() is active: hi() ## [1] &quot;Wow!&quot; All functions that are required for your project are stored in this directory. Do not store executable scripts, use a script/ directory. 3.3 roxygen2 The following intuitive annotation syntax is a standard way to create documentation for your functions: #&#39; Print a welcome message #&#39; #&#39; This function prints &quot;Wow!&quot;, or a custom text, on the console. #&#39; #&#39; @param text The text to print, &quot;Wow!&quot; by default. #&#39; #&#39; @return The `text` argument, invisibly. #&#39; #&#39; @examples #&#39; hi() #&#39; hi(&quot;Hello!&quot;) hi &lt;- function(text = &quot;Wow!&quot;) { print(text) invisible(text) } This annotation can be rendered to a nicely looking HTML page with the roxygen2 and pkgdown packages. All you need to do is provide (and maintain) it. 3.4 testthat Automated tests make sure that the functions you write today continue working tomorrow. Create your first test with usethis::use_test(): # install.packages(&quot;testthat&quot;) usethis::use_test(&quot;hi&quot;) The file tests/testthat/test-hi.R is created, with the following contents: test_that(&quot;multiplication works&quot;, { expect_equal(2 * 2, 4) }) Replace this predefined text with a test that makes more sense for us: test_that(&quot;hi() works&quot;, { expect_output(hi(), &quot;Wow&quot;) expect_output(hi(&quot;Hello&quot;), &quot;Hello&quot;) }) Run the new test with devtools::test(), you can use the shortcut Ctrl + Shift + T or Cmd + Shift + T in RStudio. Check that the test actually detects failures by modifying the implementation of hi() and rerunning the test: hi &lt;- function(text = &quot;Oops!&quot;) { print(text) invisible(text) } Run the new test with devtools::test(), you can use the shortcut Ctrl + Shift + T or Cmd + Shift + T in RStudio. One test should be failing now. "],
["references.html", "# References", " # References R for data science: https://r4ds.had.co.nz/ Row oriented workflows: https://github.com/jennybc/row-oriented-workflows#readme Advanced R: http://adv-r.had.co.nz/ Tidy evaluation: https://tidyeval.tidyverse.org/ R packages: http://r-pkgs.had.co.nz/ roxygen2: Vignettes in https://cran.r-project.org/package=roxygen2, especially: Introduction to roxygen2 Generating Rd files for an overview of available tags Write R documentation in Markdown How R searches and finds stuff: http://blog.obeautifulcode.com/R/How-R-Searches-And-Finds-Stuff/ What they forgot to teach you: https://whattheyforgot.org/ Parallel processing with a purrr-like interface: https://davisvaughan.github.io/furrr/ Tidyverse principles: https://principles.tidyverse.org/ Recursive lists to use in teaching and examples: https://github.com/jennybc/repurrrsive "]
]
